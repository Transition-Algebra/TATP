***( SpeX/Lang/Base/TA

  This file is part of the SpeX-languages suite.

  Copyright : (C) 2024 Simion Stoilow Institute of Mathematics of the
              Romanian Academy (IMAR)
  License   : GNU General Public License v2.0 or later (GPL-2.0-or-later)
  Author    : Ionut Tutu <Ionut.Tutu@imar.ro>,
              Adrian Riesco <ariesco@fdi.ucm.es>

)

sload ./Language.maude
sload ../../../CommonLibs/Num.maude
sload ../../../CommonLibs/Narrowing.maude

set print attribute off .

********************************************************************************

fmod TA/META-OPS is
 protecting TA/HORN-CLAUSE-SET .
 protecting META-LEVEL .

 vars SSDS SSDS' : SubsortDeclSet .
 vars ES ES' : EquationSet .
 vars MAS MAS' : MembAxSet .
 vars ODS ODS' : OpDeclSet .
 vars IL IL' : ImportList .
 vars TL TL' : TermList .
 var  SB : Substitution .
 vars A B : Action{TA} .
 vars RS RS' : RuleSet .
 vars SS SS' : SortSet .
 var  GTL : GTermList .
 vars H H' : Header .
 var  V : Variable .
 vars T T' : Term .
 var  C : Context .
 var  M : Module .
 var  Q : Qid .

 op apply : Module Term Substitution -> Term [memo] .
 eq apply(M, T, SB) = getTerm(metaNormalize(M, apply(T, SB))) .

 op apply : Term Substitution -> Term .
 ceq apply(Q[TL], SB) = Q[TL']
  if TL' := apply*(TL, SB) .
 eq apply(V, V <- T ; SB) = T .
 eq apply(T, SB) = T [owise] .

 op apply* : TermList Substitution -> TermList .
 eq apply*(empty, SB) = empty .
 eq apply*((T, TL), SB) = apply(T, SB), apply*(TL, SB) .

 op apply : Action{TA} Substitution -> Action{TA} .
 eq apply(Act[TA]{T}, SB) = Act[TA]{apply(T, SB)} .
 eq apply(A ; B, SB) = apply(A, SB) ; apply(B, SB) .
 eq apply(A + B, SB) = apply(A, SB) + apply(B, SB) .
 eq apply(A *, SB) = apply(A, SB) * .

 op match : Module Action{TA} Action{TA} -> Substitution? .
 eq match(M, Act[TA]{T}, Act[TA]{T'}) = if metaMatch(M, T, T', nil, 0) :: Substitution
                                        then metaMatch(M, T, T', nil, 0)
                                        else metaMatch(M, T', T, nil, 0)
                                        fi .
 eq match(M, A, B) = noMatch [owise] .

 op placeInContext : Context Term -> Term .
 eq placeInContext([], T) = T .
 ceq placeInContext(Q[GTL], T) = Q[TL]
  if TL := placeInContext*(GTL, T) .
 eq placeInContext(T, T') = T [owise] .

 op placeInContext* : GTermList Term -> TermList .
 eq placeInContext*(empty, T) = empty .
 eq placeInContext*((T, GTL), T') = T, placeInContext*(GTL, T') .
 eq placeInContext*((C, GTL), T) = placeInContext(C, T), GTL .
endfm

view Substitution from TRIV to META-TERM is
 sort Elt to Substitution .
endv

fmod TA/CONDITION-SEARCH is
 protecting SET{Substitution} * (sort Set{Substitution} to SubstitutionSet) .
 protecting TA/HORN-CLAUSE-SET .
 protecting META-TERM .

 sort SearchTuple .
 op [_,_,_,_] : Term Action{TA} Bound Bound -> SearchTuple [ctor] .
 op result : Substitution Bound -> SearchTuple [ctor] .

 sorts SearchedTerm SearchedTermSet .
 subsort Term < SearchedTerm < SearchedTermSet .

 op [_,_] : Term Action{TA} -> SearchedTerm [ctor] .

 op mtSTS : -> SearchedTermSet [ctor] .
 op _&_ : SearchedTermSet SearchedTermSet -> SearchedTermSet [ctor assoc comm id: mtSTS] .

 var STS : SearchedTermSet .
 var ST : SearchedTerm .


 op _in_ : SearchedTerm SearchedTermSet -> Bool .
 eq ST in (ST & STS) = true .
 eq ST in STS = false [owise] .

 sort SearchTupleList .
 subsort SearchTuple < SearchTupleList .
 op mtSTL : -> SearchTupleList [ctor] .
 op __ : SearchTupleList SearchTupleList -> SearchTupleList [ctor assoc id: mtSTL] .

 sort CurrentCondition .
 op <_,_,_,_,_,_> : Term Action{TA} Term Substitution SearchTupleList SubstitutionSet -> CurrentCondition [ctor] .
 op <_,_> : Term Term -> CurrentCondition [ctor] .

 sort ConditionStack .
 subsort CurrentCondition < ConditionStack .
 op mtCS : -> ConditionStack [ctor] .
 op __ : ConditionStack ConditionStack -> ConditionStack [ctor assoc id: mtCS] .
endfm

fmod TA/BOUNDED-RED is
 protecting TA/CONDITION-SEARCH .
 protecting TA/META-OPS .
 protecting BOUND .

 vars T T' T'' L L' L'' R R' R'' CURR CURR' PAT PAT' : Term .
 vars NSB NSB' NSB'' NSB''' NCB NCB' NCB'' B : Bound .
 *** Number of steps, number of conditions
 vars NS NS' NS'' NC NC' NC'' N N' : Nat .
 vars CS CS' CS'' : ConditionStack .
 vars STL STL' : SearchTupleList .
 vars SB SB' ASB : Substitution .
 vars SS SS' : SubstitutionSet .
 var  AF : AtomicFormula{TA} .
 vars A A' A'' : Action{TA} .
 vars HCS HCS' : HClSet{TA} .
 var  STS : SearchedTermSet .
 var  COND : Condition{TA} .
 var  SB? : Substitution? .
 var  HC : HornClause{TA} .
 var  CTXT : Context .
 var  AtS : AttrSet .
 var  TS : TermSet .
 var  M : Module .
 var  Ty : Type .
 var  S : Sort .
 var  LA : TA .

 sort SearchResult .
 op [_,_,_] : Substitution? ConditionStack Bound -> SearchResult [ctor] .

 op solveCondition : Module HClSet{TA} Substitution Condition{TA} Bound Bound ConditionStack SearchedTermSet -> SearchResult .
 eq solveCondition(M, HCS, SB, true, NSB, NCB, CS, STS) = [SB, CS, NSB] .
 ceq solveCondition(M, HCS, SB, Eq[LA]{L = R} /\ COND, NSB, NCB, CS, STS) = solveCondition(M, HCS, SB, COND, NSB'', NCB, CS', STS)
  if L' := apply(L, SB) /\
     R' := apply(R, SB) /\
     [L'', NSB'] := $boundedRed(M, L', HCS, NSB, NCB, L' & STS) /\
     [R'', NSB''] := $boundedRed(M, R', HCS, NSB', NCB, R' & STS) /\
     L'' == R'' /\
     CS' := < L, R > CS .
 ceq solveCondition(M, HCS, SB, Eq[LA]{L = R} /\ COND, NSB, NCB, CS, STS) =
                                        if SB? :: Substitution
                                        then solveCondition(M, HCS, SB?, Eq[LA]{L = R} /\ COND, NSB''', NCB, CS', STS)
                                        else [noMatch, CS', NSB''']
                                        fi
  if L' := apply(L, SB) /\
     R' := apply(R, SB) /\
     [L'', NSB'] := $boundedRed(M, L', HCS, NSB, NCB, L' & STS) /\
     [R'', NSB''] := $boundedRed(M, R', HCS, NSB', NCB, R' & STS) /\
     L'' =/= R'' /\
     [SB?, CS', NSB'''] := solveCondition(M, HCS, CS, NCB, STS) .
 ceq solveCondition(M, HCS, SB, Trans[LA]{L =( A )> R} /\ COND, NSB, NCB, CS, STS) =
                                        if SB? :: Substitution
                                        then solveCondition(M, HCS, SB?, COND, NSB''', NCB, CS', STS)
                                        else [noMatch, CS', NSB''']
                                        fi
  if L' := apply(L, SB) /\
     [L'', NSB'] := $boundedRed(M, L', HCS, NSB, NCB, L' & STS) /\
     R' := apply(R, SB) /\
     [R'', NSB''] := $boundedRed(M, R', HCS, NSB', NCB, R' & STS) /\
     A' := apply(A, SB) /\
     CS' := < L, A, R'', SB, [L'', A', NSB'', NCB], empty > /\
     [SB?, CS'', NSB'''] := solveCondition(M, HCS, CS', NCB, [L'', A'] & STS) .
 eq solveCondition(M, HCS, SB, COND, NSB, NCB, CS, STS) = [noMatch, CS, NSB] [owise] .

 op allMatches : Module Term Term Nat SubstitutionSet -> SubstitutionSet [memo] .
 ceq allMatches(M, T, PAT, N, SS) = SB, allMatches(M, T, PAT, s(N), SS)
  if SB := metaMatch(M, PAT, T, nil, N) /\
     not SB in SS .
 ceq allMatches(M, T, PAT, N, SS) = allMatches(M, T, PAT, s(N), SS)
  if SB := metaMatch(M, PAT, T, nil, N) /\
     SB in SS .
 ceq allMatches(M, T, PAT, N, SS) = empty
  if metaMatch(M, PAT, T, nil, N) == noMatch .

 sort TermSet .
 subsort Term < TermSet .

 op mtTS : -> TermSet [ctor] .
 op _$_ : TermSet TermSet -> TermSet [ctor comm assoc id: mtTS] .

 eq T $ T = T .

 op createResults : SubstitutionSet Bound -> SearchTupleList .
 eq createResults(empty, NSB) = mtSTL .
 eq createResults((SB, SS), NSB) = result(SB, NSB) createResults(SS, NSB) .

 op solveCondition : Module HClSet{TA} ConditionStack Bound SearchedTermSet -> SearchResult .
 eq solveCondition(M, HCS, < CURR, A, PAT, SB, result(SB', NSB) STL, SS > CS, NCB, STS) =
                                                                [(SB ; SB'), < CURR, A, PAT, SB, STL, SS > CS, NSB] .
 ceq solveCondition(M, HCS, < L, R > CS, NCB, STS) = if L'' == R''
                                                     then [SB, CS', NSB'']
                                                     else solveCondition(M, HCS, < L, R > CS', NCB, STS)
                                                     fi
  if [SB, CS', NSB] := solveCondition(M, HCS, CS, NCB, STS) /\
     L' := apply(L, SB) /\
     R' := apply(R, SB) /\
     [L'', NSB'] := $boundedRed(M, L', HCS, NSB, NCB, L' & STS) /\
     [R'', NSB''] := $boundedRed(M, R', HCS, NSB', NCB, R' & STS) .
 ceq solveCondition(M, HCS, < CURR, A, PAT, SB, mtSTL, SS > CS, NCB, STS) = solveCondition(M, HCS, CS'', NCB, STS)
  if [SB', CS', NSB] := solveCondition(M, HCS, CS, NCB, STS) /\
     L' := apply(CURR, SB') /\
     CS'' := < CURR, A, PAT, SB', [L', A, NSB, NCB], SS > CS' .
 *** Stack of searched terms?
 ceq solveCondition(M, HCS, < CURR, A, PAT, SB, [T, A', NSB, NCB] STL, SS > CS, NCB', STS) =
                 solveCondition(M, HCS, < CURR, A, PAT, SB, STL STL', SS > CS, NCB', STS)
  if PAT' := apply(M, PAT, SB) /\
     STL' := allTermsOneStep(M, T, A', PAT', HCS, NSB, NCB, SS, [T, A'] & STS) .
 eq solveCondition(M, HCS, CS, NCB, STS) = [noMatch, mtCS, 0] [owise] .

 sort ReductionTuple .
 op noReduction : -> ReductionTuple [ctor] .
 op [_,_] : Term Bound -> ReductionTuple [ctor] .
 op [_,_] : Type Bound -> ReductionTuple [ctor] .
 op [_,_,_] : Term Substitution Bound -> ReductionTuple [ctor] .

 op getTerm : ReductionTuple ~> Term .
 eq getTerm([T, NSB]) = T .
 eq getTerm([T, SB, NSB]) = T .

 op boundedRed : Module Term HClSet{TA} Bound Bound -> ResultPair .
 ceq boundedRed(M, T, HCS, NSB, NCB) = {T', Ty}
  if T' := getTerm($boundedRed(M, T, HCS, NSB, NCB, T)) /\
     Ty := getType(metaNormalize(M, T')) .

 op $boundedRed : Module Term HClSet{TA} Bound Bound SearchedTermSet -> ReductionTuple .
 ceq $boundedRed(M, T, HCS, NSB, NCB, STS) = $boundedRed(M, T', HCS, NSB', NCB, STS)
  if noZero(NSB) /\
     [T', NSB'] := oneStep(M, T, HCS, NSB, NCB, STS) .
 eq $boundedRed(M, T, HCS, NSB, NCB, STS) = [T, NSB] [owise] .

 op allTermsOneStep : Module Term Action{TA} Term HClSet{TA} Bound Bound SubstitutionSet SearchedTermSet -> SearchTupleList .
 eq allTermsOneStep(M, T, A + A', PAT, HCS, NSB, NCB, SS, STS) =
          if [T, A] in STS
          then mtSTL
          else allTermsOneStep(M, T, A, PAT, HCS, HCS, NSB, NCB, SS, [T, A] & STS)
          fi
          if [T, A'] in STS
          then mtSTL
          else allTermsOneStep(M, T, A', PAT, HCS, HCS, NSB, NCB, SS, [T, A'] & STS)
          fi .
 ceq allTermsOneStep(M, T, A *, PAT, HCS, NSB, NCB, SS, STS) =
                 STL
                 if false ***[T, A *] in STS
                 then mtSTL
                 else allTermsOneStep(M, T, A ; (A *), PAT, HCS, NSB, NCB, SS, [T, A *] & STS)
                 fi
  if SS' := allMatches(M, T, PAT, 0, SS) /\
     STL := createResults(SS', NSB) .
 eq allTermsOneStep(M, T, (A *) ; A', PAT, HCS, NSB, NCB, SS, STS) =
             allTermsOneStep(M, T, A', PAT, HCS, NSB, NCB, SS, STS)
             allTermsOneStep(M, T, A, (A *) ; A', PAT, HCS, HCS, NSB, NCB, SS, STS) .
 eq allTermsOneStep(M, T, A ; A', PAT, HCS, NSB, NCB, SS, STS) =
             allTermsOneStep(M, T, A, A', PAT, HCS, HCS, NSB, NCB, SS, STS) [owise] .
 eq allTermsOneStep(M, T, A, PAT, HCS, NSB, NCB, SS, STS) = allTermsOneStep(M, T, A, PAT, HCS, HCS, NSB, NCB, SS, STS) [owise] .

 op allTermsOneStep : Module Term Action{TA} Term HClSet{TA} HClSet{TA} Bound Bound SubstitutionSet SearchedTermSet -> SearchTupleList .
 eq allTermsOneStep(M, T, A, PAT, none, HCS, NSB, NCB, SS, STS) = mtSTL .
 eq allTermsOneStep(M, T, A, PAT, (HC HCS), HCS', NSB, NCB, SS, STS) =
                allTermsOneStepOneClause(M, T, A, PAT, HC, HCS', NSB, NCB, 0, SS, STS)
                allTermsOneStep(M, T, A, PAT, HCS, HCS', NSB, NCB, SS, STS) .

 op allTermsOneStepOneClause : Module Term Action{TA} Term HornClause{TA} HClSet{TA} Bound Bound Nat SubstitutionSet
                               SearchedTermSet -> SearchTupleList .
 ceq allTermsOneStepOneClause(M, T, A, PAT, HC, HCS, NSB, NCB, N, SS, STS) =
                  STL allTermsOneStepOneClause(M, T, A, PAT, HC, HCS, NSB, NCB, s(N), (SS, SS'), STS)
  if cl Trans[LA]{L =( A' )> R} if COND [AtS] . := HC /\
     noZero(NSB) /\
     (noZero(NCB) or COND == true) /\
     {SB, CTXT} := metaXmatch(M, L, T, nil, 0, unbounded, N) /\
     NSB' := minus(NSB, 1) /\
     NCB' := if COND == true
             then NCB
             else minus(NCB, 1)
             fi /\
     ASB := match(M, apply(A, SB), apply(A', SB)) /\
     [SB', CS, NSB''] := solveCondition(M, HCS, (SB ; ASB), COND, NSB', NCB', mtCS, STS) /\
     T' := placeInContext(CTXT, apply(M, R, SB')) /\
     [T'', NSB'''] := $boundedRed(M, T', HCS, NSB', NCB', T' & STS) /\
     SS' := allMatches(M, T'', PAT, 0, SS) /\
     STL := createResults(SS', NSB'') .
 *** ARR
 ***(
 ceq allTermsOneStepOneClause(M, T, A, PAT, HC, HCS, NSB, NCB, N, SS, STS) =
                  STL allTermsOneStepOneClause(M, T, A, PAT, HC, HCS, NSB, NCB, s(N), (SS, SS'), STS)
  if cl Trans[LA]{L =( A' )> R} if COND [AtS] . := HC /\
     noZero(NSB) /\
     (noZero(NCB) or COND == true) /\
     {SB, CTXT} := metaXmatch(M, L, T, nil, 0, unbounded, N) /\
     NSB' := minus(NSB, 1) /\
     NCB' := if COND == true
             then NCB
             else minus(NCB, 1)
             fi /\
     ASB := match(M, apply(A', SB), apply(A, SB)) /\
     [SB', CS, NSB''] := solveCondition(M, HCS, (SB ; ASB), COND, NSB', NCB', mtCS, STS) /\
     T' := placeInContext(CTXT, apply(M, R, SB')) /\
     [T'', NSB'''] := $boundedRed(M, T', HCS, NSB', NCB', T' & STS) /\
     SS' := allMatches(M, T'', PAT, 0, SS) /\
     STL := createResults(SS', NSB'') .
     )
 eq allTermsOneStepOneClause(M, T, A, PAT, HC, HCS, NSB, NCB, N, SS, STS) = mtSTL [owise] .

 *** Extra argument for A ; B
 op allTermsOneStep : Module Term Action{TA} Action{TA} Term HClSet{TA} HClSet{TA} Bound Bound SubstitutionSet SearchedTermSet
                      -> SearchTupleList .
 eq allTermsOneStep(M, T, A, A', PAT, none, HCS, NSB, NCB, SS, STS) = mtSTL .
 eq allTermsOneStep(M, T, A, A', PAT, (HC HCS), HCS', NSB, NCB, SS, STS) =
                         allTermsOneStepOneClause(M, T, A, A', PAT, HC, HCS', NSB, NCB, 0, SS, STS)
                         allTermsOneStep(M, T, A, A', PAT, HCS, HCS', NSB, NCB, SS, STS) .

 op allTermsOneStepOneClause : Module Term Action{TA} Action{TA} Term HornClause{TA} HClSet{TA} Bound Bound Nat SubstitutionSet
                               SearchedTermSet -> SearchTupleList .
 ceq allTermsOneStepOneClause(M, T, A, A'', PAT, HC, HCS, NSB, NCB, N, SS, STS) =
            STL allTermsOneStepOneClause(M, T, A, A'', PAT, HC, HCS, NSB, NCB, s(N), SS, STS)
  if cl Trans[LA]{L =( A' )> R} if COND [AtS] . := HC /\
     noZero(NSB) /\
     (noZero(NCB) or COND == true) /\
     {SB, CTXT} := metaXmatch(M, L, T, nil, 0, unbounded, N) /\
     NSB' := minus(NSB, 1) /\
     NCB' := if COND == true
             then NCB
             else minus(NCB, 1)
             fi /\
     ASB := match(M, apply(A', SB), apply(A, SB)) /\
     [SB', CS, NSB''] := solveCondition(M, HCS, (SB ; ASB), COND, NSB', NCB', mtCS, STS) /\
     T' := placeInContext(CTXT, apply(M, R, SB')) /\
     [T'', NSB'''] := $boundedRed(M, T', HCS, NSB', NCB', T' & STS) /\
     STL := [T'', A'', NSB''', NCB] .
 eq allTermsOneStepOneClause(M, T, A, A', PAT, HC, HCS, NSB, NCB, N, SS, STS) = mtSTL [owise] .

 op oneStep : Module Term HClSet{TA} Bound Bound SearchedTermSet -> ReductionTuple .
 ceq oneStep(M, T, HCS, NSB, NCB, STS) = [T', NSB']
  if cl Eq[LA]{L = R} if COND [AtS] . HCS' := HCS /\
     noZero(NSB) /\
     (noZero(NCB) or COND == true) /\
     {SB, CTXT} := metaXmatch(M, L, T, nil, 0, unbounded, 0) /\
     NSB' := minus(NSB, 1) /\
     NCB' := if COND == true
             then NCB
             else minus(NCB, 1)
             fi /\
     T' := placeInContext(CTXT, apply(M, R, SB)) /\
     [SB', CS, NSB''] := solveCondition(M, HCS, SB, COND, NSB', NCB', mtCS, STS) .
 eq oneStep(M, T, HCS, NSB, NCB, STS) = noReduction [owise] .

 op noZero : Bound -> Bool .
 eq noZero(0) = false .
 eq noZero(B) = true [owise] .

 op minus : Bound Nat ~> Bound .
 eq minus(unbounded, N) = unbounded .
 eq minus(N, 0) = N .
 eq minus(s(N), s(N')) = minus(N, N') .

 op gte : Bound Nat -> Bool .
 eq gte(unbounded, N) = true .
 eq gte(N, N') = N >= N .
endfm

fmod TA/REDUCE is
  protecting TA/BOUNDED-RED .
  protecting TA/LANGUAGE .

  var  L : TA .
  var  SB : SpecBody{TA} .
  vars H QI : Qid .
  var  QIL : QidList .
  var  IL : ImportList .
  var  SS : SortSet .
  var  SSDS : SubsortDeclSet .
  var  ODS : OpDeclSet .
  var  MAS : MembAxSet .
  var  EQS : EquationSet .
  var  M : FModule .
  var  T : Term .
  var  HCS : HClSet{TA} .
  var  RP : ResultPair .
  vars C R : Bound .

  *** fmod  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op fmod : Qid SpecBody{TA} -> FModule .
  ceq fmod(H, SB)
   = (fmod H is
        IL sorts SS . SSDS ODS MAS EQS
      endfm)
   if (fmod QI is
         IL sorts SS . SSDS ODS MAS EQS
       endfm) := fmod(term-grammar(SB)) .

  *** printf  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op printf : TA ResultPair QidList FModule -> QidList .
  eq printf(L, RP, QIL, M)
   = metaPrettyPrint(M, none, getTerm(RP), mixfix format number rat)
     QIL mksord(getType(RP)) .

  *** reduce  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op reduce : TA Term FModule HClSet{TA} Bound Bound -> ResultPair .
  eq reduce(L, T, M, HCS, C, R) = boundedRed(M, T, HCS, C, R) .
endfm

********************************************************************************

fmod TA/CHECK is
  protecting TA/READ .
  protecting TA/SHOW .
  protecting TA/HORN-CLAUSE-SET .
  protecting META-NARROWING .
  protecting BOUND/OPS .
  protecting PRINTING/COMPAT .

  var  L : TA .
  var  SB : SpecBody{TA} .
  vars H QI : Qid .
  vars QIL LbL : QidList .
  var  IL : ImportList .
  var  S : Sort .
  var  SS TS : SortSet .
  var  SSDS : SubsortDeclSet .
  var  ODS : OpDeclSet .
  var  MAS : MembAxSet .
  var  EQS : EquationSet .
  vars D W : Bound .
  vars M NM : Module .
  vars NP X Y A B LHS RHS T : Term .
  var  E : ATerm .
  var  HCS : HClSet{TA} .
  var  C : Condition{TA} .
  var  C? : [Condition{TA}] .
  vars Q Q1 Q2 : EqQuery .
  var  LQ : List{EqQuery} .
  var  RP : ResultPair .

  *** check  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  op narrow-check : Condition{TA} SpecBody{TA} Bound Bound ~> Bool .
  eq narrow-check(C, SB, D, W)
   = narrow-check(nil, D, W, query(eq-cond(C)), eq-mod('TA, SB)) .
  eq narrow-check(C?, SB, D, W) = false [owise] .

  *** narrow  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op narrow : Condition{TA} QidList SpecBody{TA} Bound Bound ~> List{EqQuery} .
  eq narrow(C, LbL, SB, D, W)
   = narrow(LbL, min(D, size(LbL)), W, query(eq-cond(C)), eq-mod('TA, SB)) .
  eq narrow(C?, LbL, SB, D, W) = nil [owise] .

  *** eq-mod  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op eq-mod : Qid SpecBody{TA} ~> FModule .
  ceq eq-mod(H, SB)
   = (fmod H is
        IL sorts SS . SSDS ODS MAS EQS act-eqs(TA, TS) eqs(HCS)
      endfm)
   if (fmod QI is
         IL sorts SS . SSDS ODS MAS EQS
       endfm) := fmod(sentence-grammar(SB))
      /\ TS := getSorts(fmod(term-grammar(SB)))
      /\ HCS := Horn-clauses(read-formulae(TA, sens(SB))) .

  *** act-eqs  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  op act-eqs : TA SortSet -> EquationSet .
  eq act-eqs(L, none) = none .
  ceq act-eqs(L, S ; SS)
   = (ceq '_=_>_[X, '_;_[A, B], Y] = 'true.AtomicSentence`{TA`}
      if '_=_>_[X, A, var('K, S)] = 'true.AtomicSentence`{TA`}
         /\ '_=_>_[var('K, S), B, Y] = 'true.AtomicSentence`{TA`}
      [nonexec label('comp)] .)
     (ceq '_=_>_[X, '_+_[A, B], Y] = 'true.AtomicSentence`{TA`}
      if '_=_>_[X, A, Y] = 'true.AtomicSentence`{TA`} [label('choice)] .)
     (ceq '_=_>_[X, '_+_[A, B], Y] = 'true.AtomicSentence`{TA`}
      if '_=_>_[X, B, Y] = 'true.AtomicSentence`{TA`} [label('choice)] .)
     (ceq '_=_>_[X, '_*[A], Y] = 'true.AtomicSentence`{TA`}
      if X = Y [label('star)] .)
     (ceq '_=_>_[X, '_*[A], Y] = 'true.AtomicSentence`{TA`}
      if '_=_>_[X, '_;_[A, '_*[A]], Y] = 'true.AtomicSentence`{TA`}
      [label('star)] .)
     act-eqs(L, SS)
   if X := var('X, S) /\ Y := var('Y, S)
      /\ A := 'A:Action`{TA`} /\ B := 'B:Action`{TA`} .

  *** print  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  op print : TA EqQuery Module -> QidList .
  eq print(L, LHS =q= RHS, M)
   = (print term LHS given (M & none))
     if RHS == 'true.AtomicSentence`{TA`} then nil
     else '\s '\! '= '\s '\o (print term RHS given (M & none)) fi .
  eq print(L, true, M) = '\! 'true '\o .
  eq print(L, false, M) = '\! 'false '\o .
  eq print(L, Q1 /\ Q2, M)
   = print(L, Q1, M) '\s '\! 'and '\s '\o print(L, Q2, M) .

  op print2 : TA List{EqQuery} Module -> QidList2 .
  eq print2(L, nil, M) = nil .
  eq print2(L, Q LQ, M) = :[print(L, Q, M)] print2(L, LQ, M) .
endfm

********************************************************************************

